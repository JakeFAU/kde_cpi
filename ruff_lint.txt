UP035 [*] Import from `collections.abc` instead: `Iterable`, `Sequence`
 --> src/kde_cpi/data/ingest.py:3:1
  |
1 | """Orchestration utilities for assembling CPI datasets from flat files."""
2 |
3 | from typing import Iterable, Sequence
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
4 |
5 | from attrs import define, field
  |
help: Import from `collections.abc`

I001 [*] Import block is un-sorted or un-formatted
  --> src/kde_cpi/data/ingest.py:3:1
   |
 1 |   """Orchestration utilities for assembling CPI datasets from flat files."""
 2 |
 3 | / from typing import Iterable, Sequence
 4 | |
 5 | | from attrs import define, field
 6 | |
 7 | | from .client import CpiHttpClient
 8 | | from .files import CURRENT_DATA_FILES, DATA_FILES, MAPPING_FILES, SERIES_FILE
 9 | | from .models import Dataset
10 | | from . import parser
   | |____________________^
   |
help: Organize imports

UP035 [*] Import from `collections.abc` instead: `Iterable`, `Sequence`
 --> src/kde_cpi/data/loader.py:3:1
  |
1 | """Async PostgreSQL integration for CPI datasets."""
2 |
3 | from typing import Any, Iterable, Sequence
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
4 |
5 | import asyncpg
  |
help: Import from `collections.abc`

E501 Line too long (118 > 100)
  --> src/kde_cpi/data/loader.py:44:101
   |
42 |             );
43 |             """,
44 |             f"ALTER TABLE {qualified('cpi_item')} ADD COLUMN IF NOT EXISTS display_level integer NOT NULL DEFAULT 0;",
   |                                                                                                     ^^^^^^^^^^^^^^^^^^
45 |             f"ALTER TABLE {qualified('cpi_item')} ADD COLUMN IF NOT EXISTS selectable boolean NOT NULL DEFAULT false;",
46 |             f"ALTER TABLE {qualified('cpi_item')} ADD COLUMN IF NOT EXISTS sort_sequence integer NOT NULL DEFAULT 0;",
   |

E501 Line too long (119 > 100)
  --> src/kde_cpi/data/loader.py:45:101
   |
43 |             """,
44 |             f"ALTER TABLE {qualified('cpi_item')} ADD COLUMN IF NOT EXISTS display_level integer NOT NULL DEFAULT 0;",
45 |             f"ALTER TABLE {qualified('cpi_item')} ADD COLUMN IF NOT EXISTS selectable boolean NOT NULL DEFAULT false;",
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^
46 |             f"ALTER TABLE {qualified('cpi_item')} ADD COLUMN IF NOT EXISTS sort_sequence integer NOT NULL DEFAULT 0;",
47 |             f"""
   |

E501 Line too long (118 > 100)
  --> src/kde_cpi/data/loader.py:46:101
   |
44 |             f"ALTER TABLE {qualified('cpi_item')} ADD COLUMN IF NOT EXISTS display_level integer NOT NULL DEFAULT 0;",
45 |             f"ALTER TABLE {qualified('cpi_item')} ADD COLUMN IF NOT EXISTS selectable boolean NOT NULL DEFAULT false;",
46 |             f"ALTER TABLE {qualified('cpi_item')} ADD COLUMN IF NOT EXISTS sort_sequence integer NOT NULL DEFAULT 0;",
   |                                                                                                     ^^^^^^^^^^^^^^^^^^
47 |             f"""
48 |             CREATE TABLE IF NOT EXISTS {qualified("cpi_item")} (
   |

E501 Line too long (107 > 100)
  --> src/kde_cpi/data/loader.py:86:101
   |
84 |             f"""
85 |             CREATE TABLE IF NOT EXISTS {qualified("cpi_observation")} (
86 |                 series_id text NOT NULL REFERENCES {qualified("cpi_series")} (series_id) ON DELETE CASCADE,
   |                                                                                                     ^^^^^^^
87 |                 year integer NOT NULL,
88 |                 period text NOT NULL,
   |

E501 Line too long (109 > 100)
   --> src/kde_cpi/data/loader.py:104:101
    |
102 |             if truncate:
103 |                 await conn.execute(
104 |                     f"TRUNCATE TABLE {self._qualified('cpi_observation')}, {self._qualified('cpi_series')}, "
    |                                                                                                     ^^^^^^^^^
105 |                     f"{self._qualified('cpi_footnote')}, {self._qualified('cpi_period')}, "
106 |                     f"{self._qualified('cpi_item')}, {self._qualified('cpi_area')} RESTART IDENTITY"
    |

S608 Possible SQL injection vector through string-based query construction
   --> src/kde_cpi/data/loader.py:130:17
    |
128 |           if not observations:
129 |               return
130 |           query = f"""
    |  _________________^
131 | |         INSERT INTO {self._qualified('cpi_observation')} (series_id, year, period, value, footnotes)
132 | |         VALUES ($1, $2, $3, $4, $5)
133 | |         ON CONFLICT (series_id, year, period)
134 | |         DO UPDATE SET value = EXCLUDED.value,
135 | |                       footnotes = EXCLUDED.footnotes;
136 | |         """
    | |___________^
137 |           args = [
138 |               (
    |

S608 Possible SQL injection vector through string-based query construction
   --> src/kde_cpi/data/loader.py:261:17
    |
259 |           if not areas:
260 |               return
261 |           query = f"""
    |  _________________^
262 | |         INSERT INTO {self._qualified('cpi_area')} (area_code, area_name)
263 | |         VALUES ($1, $2)
264 | |         ON CONFLICT (area_code) DO UPDATE SET area_name = EXCLUDED.area_name;
265 | |         """
    | |___________^
266 |           await conn.executemany(query, [(area.code, area.name) for area in areas])
    |

S608 Possible SQL injection vector through string-based query construction
   --> src/kde_cpi/data/loader.py:271:17
    |
269 |           if not items:
270 |               return
271 |           query = f"""
    |  _________________^
272 | |         INSERT INTO {self._qualified('cpi_item')} (item_code, item_name, display_level, selectable, sort_sequence)
273 | |         VALUES ($1, $2, $3, $4, $5)
274 | |         ON CONFLICT (item_code) DO UPDATE SET
275 | |             item_name = EXCLUDED.item_name,
276 | |             display_level = EXCLUDED.display_level,
277 | |             selectable = EXCLUDED.selectable,
278 | |             sort_sequence = EXCLUDED.sort_sequence;
279 | |         """
    | |___________^
280 |           await conn.executemany(
281 |               query,
    |

E501 Line too long (114 > 100)
   --> src/kde_cpi/data/loader.py:272:101
    |
270 |             return
271 |         query = f"""
272 |         INSERT INTO {self._qualified('cpi_item')} (item_code, item_name, display_level, selectable, sort_sequence)
    |                                                                                                     ^^^^^^^^^^^^^^
273 |         VALUES ($1, $2, $3, $4, $5)
274 |         ON CONFLICT (item_code) DO UPDATE SET
    |

S608 Possible SQL injection vector through string-based query construction
   --> src/kde_cpi/data/loader.py:299:17
    |
297 |           if not periods:
298 |               return
299 |           query = f"""
    |  _________________^
300 | |         INSERT INTO {self._qualified('cpi_period')} (period_code, period_abbr, period_name)
301 | |         VALUES ($1, $2, $3)
302 | |         ON CONFLICT (period_code)
303 | |         DO UPDATE SET period_abbr = EXCLUDED.period_abbr,
304 | |                       period_name = EXCLUDED.period_name;
305 | |         """
    | |___________^
306 |           await conn.executemany(
307 |               query, [(period.code, period.abbr, period.name) for period in periods]
    |

S608 Possible SQL injection vector through string-based query construction
   --> src/kde_cpi/data/loader.py:315:17
    |
313 |           if not footnotes:
314 |               return
315 |           query = f"""
    |  _________________^
316 | |         INSERT INTO {self._qualified('cpi_footnote')} (footnote_code, footnote_text)
317 | |         VALUES ($1, $2)
318 | |         ON CONFLICT (footnote_code) DO UPDATE SET footnote_text = EXCLUDED.footnote_text;
319 | |         """
    | |___________^
320 |           await conn.executemany(
321 |               query, [(footnote.code, footnote.text) for footnote in footnotes]
    |

S608 Possible SQL injection vector through string-based query construction
   --> src/kde_cpi/data/loader.py:329:17
    |
327 |           if not series_list:
328 |               return
329 |           query = f"""
    |  _________________^
330 | |         INSERT INTO {self._qualified('cpi_series')}
331 | |             (series_id, area_code, item_code, seasonal, periodicity_code, base_code, base_period,
332 | |              begin_year, begin_period, end_year, end_period)
333 | |         VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
334 | |         ON CONFLICT (series_id) DO UPDATE SET
335 | |             area_code = EXCLUDED.area_code,
336 | |             item_code = EXCLUDED.item_code,
337 | |             seasonal = EXCLUDED.seasonal,
338 | |             periodicity_code = EXCLUDED.periodicity_code,
339 | |             base_code = EXCLUDED.base_code,
340 | |             base_period = EXCLUDED.base_period,
341 | |             begin_year = EXCLUDED.begin_year,
342 | |             begin_period = EXCLUDED.begin_period,
343 | |             end_year = EXCLUDED.end_year,
344 | |             end_period = EXCLUDED.end_period;
345 | |         """
    | |___________^
346 |           args = [
347 |               (
    |

I001 [*] Import block is un-sorted or un-formatted
 --> src/kde_cpi/data/models.py:3:1
  |
1 |   """Domain models for BLS Consumer Price Index (CU) survey flat files."""
2 |
3 | / import marshmallow as ma
4 | |
5 | | from dataclasses import asdict
6 | | from decimal import Decimal, InvalidOperation
7 | | from typing import Iterable, Optional, Tuple, Any
8 | |
9 | | from attrs import define, field
  | |_______________________________^
  |
help: Organize imports

UP035 [*] Import from `collections.abc` instead: `Iterable`
 --> src/kde_cpi/data/models.py:7:1
  |
5 | from dataclasses import asdict
6 | from decimal import Decimal, InvalidOperation
7 | from typing import Iterable, Optional, Tuple, Any
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
8 |
9 | from attrs import define, field
  |
help: Import from `collections.abc`

UP035 `typing.Tuple` is deprecated, use `tuple` instead
 --> src/kde_cpi/data/models.py:7:1
  |
5 | from dataclasses import asdict
6 | from decimal import Decimal, InvalidOperation
7 | from typing import Iterable, Optional, Tuple, Any
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
8 |
9 | from attrs import define, field
  |

F401 [*] `typing.Optional` imported but unused
 --> src/kde_cpi/data/models.py:7:30
  |
5 | from dataclasses import asdict
6 | from decimal import Decimal, InvalidOperation
7 | from typing import Iterable, Optional, Tuple, Any
  |                              ^^^^^^^^
8 |
9 | from attrs import define, field
  |
help: Remove unused import: `typing.Optional`

UP006 [*] Use `tuple` instead of `Tuple` for type annotation
   --> src/kde_cpi/data/models.py:121:36
    |
121 | def _footnote_tuple(value: str) -> Tuple[str, ...]:
    |                                    ^^^^^
122 |     value = value.strip()
123 |     if not value:
    |
help: Replace with `tuple`

UP006 [*] Use `tuple` instead of `Tuple` for type annotation
   --> src/kde_cpi/data/models.py:146:16
    |
144 |     period: str = field(converter=_strip)
145 |     value: Decimal = field(converter=_decimal)
146 |     footnotes: Tuple[str, ...] = field(converter=_footnote_tuple, factory=tuple)
    |                ^^^^^
147 |
148 |     def is_annual(self) -> bool:
    |
help: Replace with `tuple`

UP035 [*] Import from `collections.abc` instead: `Iterable`
 --> src/kde_cpi/data/parser.py:5:1
  |
3 | import csv
4 | import io
5 | from typing import Iterable, List
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
6 |
7 | from .models import Area, Footnote, Item, Observation, Period, Series
  |
help: Import from `collections.abc`

UP035 `typing.List` is deprecated, use `list` instead
 --> src/kde_cpi/data/parser.py:5:1
  |
3 | import csv
4 | import io
5 | from typing import Iterable, List
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
6 |
7 | from .models import Area, Footnote, Item, Observation, Period, Series
  |

UP006 [*] Use `list` instead of `List` for type annotation
  --> src/kde_cpi/data/parser.py:22:31
   |
22 | def parse_areas(text: str) -> List[Area]:
   |                               ^^^^
23 |     return [
24 |         Area(code=row["area_code"], name=row["area_name"]) for row in _read_tsv(text)
   |
help: Replace with `list`

UP006 [*] Use `list` instead of `List` for type annotation
  --> src/kde_cpi/data/parser.py:28:31
   |
28 | def parse_items(text: str) -> List[Item]:
   |                               ^^^^
29 |     return [
30 |         Item(
   |
help: Replace with `list`

UP006 [*] Use `list` instead of `List` for type annotation
  --> src/kde_cpi/data/parser.py:41:33
   |
41 | def parse_periods(text: str) -> List[Period]:
   |                                 ^^^^
42 |     return [
43 |         Period(code=row["period"], abbr=row["period_abbr"], name=row["period_name"])
   |
help: Replace with `list`

UP006 [*] Use `list` instead of `List` for type annotation
  --> src/kde_cpi/data/parser.py:48:35
   |
48 | def parse_footnotes(text: str) -> List[Footnote]:
   |                                   ^^^^
49 |     return [
50 |         Footnote(code=row["footnote_code"], text=row["footnote_text"])
   |
help: Replace with `list`

UP006 [*] Use `list` instead of `List` for type annotation
  --> src/kde_cpi/data/parser.py:60:32
   |
60 | def parse_series(text: str) -> List[Series]:
   |                                ^^^^
61 |     lines = [line for line in text.splitlines() if line.strip()]
62 |     if not lines:
   |
help: Replace with `list`

UP006 [*] Use `list` instead of `List` for type annotation
  --> src/kde_cpi/data/parser.py:82:13
   |
80 |         raise ValueError(f"Unexpected series header: {header!r}")
81 |
82 |     series: List[Series] = []
   |             ^^^^
83 |     for line in lines[1:]:
84 |         parts = _split_line(line)
   |
help: Replace with `list`

UP006 [*] Use `list` instead of `List` for type annotation
   --> src/kde_cpi/data/parser.py:117:38
    |
117 | def parse_observations(text: str) -> List[Observation]:
    |                                      ^^^^
118 |     lines = [line for line in text.splitlines() if line.strip()]
119 |     if not lines:
    |
help: Replace with `list`

UP006 [*] Use `list` instead of `List` for type annotation
   --> src/kde_cpi/data/parser.py:127:19
    |
125 |         raise ValueError(f"Unexpected data header: {header!r}")
126 |
127 |     observations: List[Observation] = []
    |                   ^^^^
128 |     for line in lines[1:]:
129 |         parts = _split_line(line)
    |
help: Replace with `list`

UP035 [*] Import from `collections.abc` instead: `Sequence`
 --> src/kde_cpi/data/pipeline.py:3:1
  |
1 | """High level orchestration helpers for CPI ingestion."""
2 |
3 | from typing import Sequence
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
4 |
5 | from .ingest import CpiDatasetBuilder
  |
help: Import from `collections.abc`

I001 [*] Import block is un-sorted or un-formatted
 --> src/kde_cpi/series/views.py:3:1
  |
1 |   """Utilities for building CPI series detail views in PostgreSQL."""
2 |
3 | /
4 | |
5 | | import re
6 | | from typing import Any, Optional, cast
7 | |
8 | | import asyncpg
9 | | from attrs import define, field
  | |_______________________________^
  |
help: Organize imports

E501 Line too long (105 > 100)
  --> src/kde_cpi/series/views.py:13:101
   |
12 | DATE_EXPRESSION = """CASE
13 |     WHEN o.period ~ '^M(0[1-9]|1[0-2])$' THEN make_date(o.year, substring(o.period from 2 for 2)::int, 1)
   |                                                                                                     ^^^^^
14 |     WHEN o.period = 'M13' THEN make_date(o.year, 12, 31)
15 |     WHEN o.period ~ '^Q0[1-4]$' THEN make_date(o.year, ((substring(o.period from 2 for 2)::int - 1) * 3) + 1, 1)
   |

E501 Line too long (112 > 100)
  --> src/kde_cpi/series/views.py:15:101
   |
13 |     WHEN o.period ~ '^M(0[1-9]|1[0-2])$' THEN make_date(o.year, substring(o.period from 2 for 2)::int, 1)
14 |     WHEN o.period = 'M13' THEN make_date(o.year, 12, 31)
15 |     WHEN o.period ~ '^Q0[1-4]$' THEN make_date(o.year, ((substring(o.period from 2 for 2)::int - 1) * 3) + 1, 1)
   |                                                                                                     ^^^^^^^^^^^^
16 |     WHEN o.period ~ '^S0[1-3]$' THEN make_date(o.year, ((substring(o.period from 2 for 2)::int - 1) * 6) + 1, 1)
17 |     ELSE make_date(o.year, 1, 1)
   |

E501 Line too long (112 > 100)
  --> src/kde_cpi/series/views.py:16:101
   |
14 |     WHEN o.period = 'M13' THEN make_date(o.year, 12, 31)
15 |     WHEN o.period ~ '^Q0[1-4]$' THEN make_date(o.year, ((substring(o.period from 2 for 2)::int - 1) * 3) + 1, 1)
16 |     WHEN o.period ~ '^S0[1-3]$' THEN make_date(o.year, ((substring(o.period from 2 for 2)::int - 1) * 6) + 1, 1)
   |                                                                                                     ^^^^^^^^^^^^
17 |     ELSE make_date(o.year, 1, 1)
18 | END"""
   |

S608 Possible SQL injection vector through string-based query construction
  --> src/kde_cpi/series/views.py:40:12
   |
38 |           filters.append("i.selectable = TRUE")
39 |       where_clause = " AND ".join(filters)
40 |       return f"""
   |  ____________^
41 | |     CREATE OR REPLACE VIEW {schema_ident}.{view_ident} AS
42 | |     SELECT
43 | |         s.series_id AS id,
44 | |         i.item_name AS name,
45 | |         {DATE_EXPRESSION} AS date,
46 | |         o.value::numeric AS value
47 | |     FROM {schema_ident}.cpi_observation o
48 | |     JOIN {schema_ident}.cpi_series s ON s.series_id = o.series_id
49 | |     JOIN {schema_ident}.cpi_item i ON i.item_code = s.item_code
50 | |     WHERE {where_clause};
51 | |     """
   | |_______^
   |

UP045 [*] Use `X | None` for type annotations
  --> src/kde_cpi/series/views.py:82:20
   |
80 |         level: int,
81 |         *,
82 |         view_name: Optional[str] = None,
   |                    ^^^^^^^^^^^^^
83 |         selectable_only: Optional[bool] = None,
84 |     ) -> str:
   |
help: Convert to `X | None`

UP045 [*] Use `X | None` for type annotations
  --> src/kde_cpi/series/views.py:83:26
   |
81 |         *,
82 |         view_name: Optional[str] = None,
83 |         selectable_only: Optional[bool] = None,
   |                          ^^^^^^^^^^^^^^
84 |     ) -> str:
85 |         view = view_name or f"cpi_view_display_level_{level}"
   |
help: Convert to `X | None`

UP045 [*] Use `X | None` for type annotations
   --> src/kde_cpi/series/views.py:100:20
    |
 98 |         code_length: int,
 99 |         *,
100 |         view_name: Optional[str] = None,
    |                    ^^^^^^^^^^^^^
101 |         selectable_only: Optional[bool] = None,
102 |     ) -> str:
    |
help: Convert to `X | None`

UP045 [*] Use `X | None` for type annotations
   --> src/kde_cpi/series/views.py:101:26
    |
 99 |         *,
100 |         view_name: Optional[str] = None,
101 |         selectable_only: Optional[bool] = None,
    |                          ^^^^^^^^^^^^^^
102 |     ) -> str:
103 |         view = view_name or f"cpi_view_item_length_{code_length}"
    |
help: Convert to `X | None`

UP045 [*] Use `X | None` for type annotations
   --> src/kde_cpi/series/views.py:114:42
    |
112 |         return view
113 |
114 |     def _selectable_flag(self, override: Optional[bool]) -> bool:
    |                                          ^^^^^^^^^^^^^^
115 |         if override is not None:
116 |             return override
    |
help: Convert to `X | None`

I001 [*] Import block is un-sorted or un-formatted
 --> tests/test_loader.py:1:1
  |
1 | / from decimal import Decimal
2 | |
3 | | from kde_cpi.data import CpiDataLoader
  | |______________________________________^
  |
help: Organize imports

E501 Line too long (186 > 100)
  --> tests/test_loader.py:23:101
   |
21 | …
22 | …
23 | …eriodicity_code\tarea_code\titem_code\tbase_code\tbase_period\tbegin_year\tbegin_period\tend_year\tend_period
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
24 | …
25 | …0\tM13
   |

Found 44 errors.
[*] 25 fixable with the `--fix` option.
