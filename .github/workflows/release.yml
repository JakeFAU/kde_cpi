name: Release

on:
  push:
    tags: ["v*.*.*"]
  workflow_dispatch:

permissions:
  contents: write
  id-token: write
  attestations: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

env:
  PACKAGE_NAME: kde-cpi

jobs:
  build:
    name: Build sdist & wheel
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          # we need full history to check ancestry
          fetch-depth: 0
          persist-credentials: false

      - name: Ensure tag commit is on main
        shell: bash
        run: |
          set -euo pipefail
          git fetch origin main --depth=0
          # $GITHUB_SHA is the tagged commit; fail if it's not an ancestor of main
          if ! git merge-base --is-ancestor "$GITHUB_SHA" "origin/main"; then
            echo "::error::$GITHUB_SHA (tag ${GITHUB_REF_NAME}) is not on origin/main."
            echo "Only tags reachable from main are allowed to publish."
            exit 1
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip
          cache-dependency-path: |
            pyproject.toml
            requirements*.txt

      - name: Verify tag matches project version
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          TAG="${GITHUB_REF_NAME#v}"
          PYPROJECT_VERSION="$(python -c "import tomllib, pathlib; print(tomllib.loads(pathlib.Path('pyproject.toml').read_text())['project']['version'])")"
          echo "file_ver=$PYPROJECT_VERSION" >> "$GITHUB_OUTPUT"
          echo "tag_ver=$TAG" >> "$GITHUB_OUTPUT"
          test "$TAG" = "$PYPROJECT_VERSION" || {
            echo "::error::Tag v$TAG != pyproject version $PYPROJECT_VERSION"
            exit 1
          }

      - name: Install build tooling
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine

      - name: Build distributions
        run: python -m build

      - name: Twine check
        run: python -m twine check dist/*

      - name: Smoke test the wheel
        run: |
          python -m venv .venv
          . .venv/bin/activate
          python -m pip install --upgrade pip
          pip install dist/*.whl
          kde-cpi --help >/dev/null

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
          if-no-files-found: error
          retention-days: 7

  publish-to-testpypi:
    name: Publish to TestPyPI
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: dist/
          attestations: true
          print-hash: true

  publish-to-pypi:
    name: Publish to PyPI
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          attestations: true
          print-hash: true

  github-release:
    name: Create GitHub Release with notes
    needs: [build, publish-to-pypi]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Generate release notes
        id: notes
        uses: actions/github-script@v7
        with:
          script: |
            const { data: notes } = await github.rest.repos.generateReleaseNotes({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: context.ref.replace('refs/tags/', ''),
            });
            core.setOutput('body', notes.body);

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body: ${{ steps.notes.outputs.body }}
          draft: false
          prerelease: false
